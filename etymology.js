/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _parser = __webpack_require__(1);

	function getEtymology(word, cb) {
		var xhr = new XMLHttpRequest();
		var url = 'https://en.wiktionary.org/w/api.php?action=query&origin=*&prop=revisions&rvprop=content&format=json&titles=' + word.toLowerCase();
		xhr.onreadystatechange = function () {
			if (xhr.readyState !== XMLHttpRequest.DONE || xhr.status !== 200) return;
			var resp = JSON.parse(xhr.responseText);
			var pages = resp.query.pages;
			var content = pages[Object.keys(pages)].revisions[0]["*"];

			var structure = parsePage(content);
			var blends = content.match(/\{\{blend.*\}\}/g);
			if (blends) {
				var res = '';
				blends.forEach(function (blend) {
					var parts = blend.split('|');
					var blendparts = parts.slice(1, parts.length - 1);
					res += 'Blend of ' + blendparts.join(' and ') + '\n';
				});
				return cb(res);
			}
			// YEAH YEAH YEAH!
			cb('No idea!');
		};
		xhr.open('GET', url, true);
		xhr.send();
	}

	function getEtymologyFromMenu(info) {
		var result = getEtymology(info.selectionText, alert);
	}
	console.log(_parser.zzz);
	chrome.contextMenus.create({
		title: 'Etymology for %s',
		id: 'etymext',
		contexts: ['selection'],
		onclick: getEtymologyFromMenu
	});

/***/ },
/* 1 */
/***/ function(module, exports) {

	// Generated by psc version 0.10.2
	"use strict";
	var zzz = 12;
	module.exports = {
	    zzz: zzz
	};


/***/ }
/******/ ]);